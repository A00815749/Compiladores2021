
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ID PLUS REST TIMES DIVIDE AND OR GREATER GREATERAND LESSER LESSERAND SAME NOTSAME EQUAL LEFTBR RIGHTBR LEFTPAR RIGHTPAR LEFTSQR RIGHTSQR COLON SEMICOLON COMMA DOT QUOT CTE_INT CTE_FLOT CTE_STRING CTE_CHAR nl PROGRAM FUNCTION VARS VOID INT FLOT CHAR PRINCIPAL IF THEN ELSE READ WRITE RETURN END FOR FROM WHILE TO MEDIA MODA VARIANZA REGRESIONSIMPLE PLOTXY DO\n        program : PROGRAM ID SEMICOLON program1\n        \n        program1 : VARS functions principal\n                | VARS functions \n                | program2\n        \n        program2 : principal\n        \n        principal : PRINCIPAL LEFTPAR RIGHTPAR LEFTBR statutes RIGHTBR\n        \n        statutes : assign SEMICOLON statutes\n                | callFunction SEMICOLON statutes\n                | reading statutes SEMICOLON statutes\n                | writing statutes SEMICOLON statutes\n                | if statutes\n                | while statutes\n                | for statutes\n                | return statutes\n                | empty\n        \n        assign : ID EQUAL exp\n                | ID LEFTSQR exp RIGHTSQR EQUAL exp\n        \n        callFunction : ID LEFTPAR exp RIGHTPAR\n        \n        reading : READ LEFTPAR reading1 RIGHTPAR\n        \n        reading1 : ID reading2\n        \n        reading2 : COMMA reading1\n                | empty\n        \n        media : MEDIA LEFTPAR array RIGHTPAR SEMICOLON\n        \n        writing : WRITE LEFTPAR writing1 RIGHTPAR\n        \n        writing1 : writing2 COMMA writing2\n                | writing2\n        \n        writing2 : CTE_STRING\n                | CTE_INT\n                | CTE_FLOT\n                | exp\n        \n        if : IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR else\n        \n        else : ELSE LEFTBR statutes RIGHTBR\n                | empty\n        \n        for : FOR assign TO CTE_INT DO LEFTBR statutes RIGHTBR\n        \n        while : WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR\n        \n        exp : ID expression exp\n            | array expression exp\n            | constants expression exp\n            | ID\n            | callFunction\n            | ID LEFTSQR exp RIGHTSQR\n            | constants\n        \n        constants : CTE_INT\n                | CTE_FLOT\n        \n        expression : PLUS\n                | REST\n                | TIMES\n                | DIVIDE\n                | GREATER\n                | GREATERAND\n                | LESSER\n                | LESSERAND\n        \n        vars : VARS vars1\n            | empty\n        \n        vars1 : typing COLON ID variables SEMICOLON vars2\n        \n        vars2 : vars1\n            | empty\n        \n        variables : COMMA ID variables\n                | COMMA ID LEFTSQR CTE_INT RIGHTSQR variables\n                | empty\n        \n        typing : INT\n                | FLOT\n                | CHAR\n        \n        array : LEFTSQR exp RIGHTSQR\n                | LEFTSQR CTE_INT RIGHTSQR\n        \n        functions : FUNCTION VOID voidfunction functions\n                    | FUNCTION typing typefunction functions\n                    | empty\n        \n        voidfunction : ID LEFTPAR args RIGHTPAR vars LEFTBR statutes RIGHTBR\n        \n        typefunction : ID LEFTPAR args RIGHTPAR vars LEFTBR statutes return SEMICOLON RIGHTBR\n        \n        args : typing COLON ID argsplural\n            | empty\n        \n        argsplural : COMMA args\n                    | empty\n        \n        return : RETURN LEFTPAR exp RIGHTPAR SEMICOLON\n                | RETURN LEFTPAR exp RIGHTPAR\n        \n        empty : \n        '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,5,6,7,8,10,12,14,21,23,26,28,51,161,176,],[0,-1,-77,-5,-4,-3,-68,-2,-77,-77,-66,-67,-6,-69,-70,]),'ID':([2,15,16,17,18,19,25,33,34,35,36,37,38,45,52,53,60,61,62,63,64,65,66,69,71,75,76,82,106,107,108,109,110,111,112,113,114,115,116,117,122,124,126,127,131,132,138,145,151,153,158,159,160,168,171,172,173,177,179,185,189,],[3,22,24,-61,-62,-63,40,40,40,40,40,40,40,68,40,40,77,77,77,88,77,77,77,77,102,40,40,77,77,77,-45,-46,-47,-48,-49,-50,-51,-52,77,77,-19,88,-24,77,-76,40,40,77,-75,162,40,40,40,175,-77,-35,-34,-31,-33,40,-32,]),'SEMICOLON':([3,31,32,33,34,35,36,37,38,39,52,53,54,55,56,57,58,59,73,74,75,76,77,78,80,81,83,84,104,105,121,122,126,131,139,141,142,151,156,157,162,163,167,169,171,172,173,175,177,179,183,188,189,190,],[4,52,53,-77,-77,-77,-77,-77,-77,-15,-77,-77,75,76,-11,-12,-13,-14,-7,-8,-77,-77,-39,-16,-42,-40,-43,-44,-9,-10,-18,-19,-24,151,-36,-37,-38,-75,-41,-17,-77,170,174,-60,-77,-35,-34,-77,-31,-33,-58,-77,-32,-59,]),'VARS':([4,70,72,],[6,100,100,]),'PRINCIPAL':([4,6,10,12,21,23,26,28,161,176,],[9,-77,9,-68,-77,-77,-66,-67,-69,-70,]),'FUNCTION':([6,21,23,161,176,],[11,11,11,-69,-70,]),'LEFTPAR':([9,22,24,40,41,42,43,44,46,77,],[13,27,29,62,63,64,65,66,69,62,]),'VOID':([11,],[15,]),'INT':([11,27,29,100,136,174,],[17,17,17,17,17,17,]),'FLOT':([11,27,29,100,136,174,],[18,18,18,18,18,18,]),'CHAR':([11,27,29,100,136,174,],[19,19,19,19,19,19,]),'RIGHTPAR':([13,27,29,47,49,50,77,80,81,83,84,86,87,88,89,90,91,92,93,94,95,96,98,102,121,123,125,135,136,137,139,141,142,146,147,154,156,],[20,-77,-77,70,-72,72,-39,-42,-40,-43,-44,121,122,-77,126,-26,-27,-28,-29,-30,128,129,131,-77,-18,-20,-22,-71,-77,-74,-36,-37,-38,-21,-25,-73,-41,]),'COLON':([17,18,19,48,134,],[-61,-62,-63,71,153,]),'LEFTBR':([20,70,72,99,101,103,133,148,149,150,174,178,180,181,182,],[25,-77,-77,132,-54,138,-53,158,159,160,-77,185,-55,-56,-57,]),'READ':([25,33,34,35,36,37,38,52,53,75,76,122,126,131,132,138,151,158,159,160,171,172,173,177,179,185,189,],[41,41,41,41,41,41,41,41,41,41,41,-19,-24,-76,41,41,-75,41,41,41,-77,-35,-34,-31,-33,41,-32,]),'WRITE':([25,33,34,35,36,37,38,52,53,75,76,122,126,131,132,138,151,158,159,160,171,172,173,177,179,185,189,],[42,42,42,42,42,42,42,42,42,42,42,-19,-24,-76,42,42,-75,42,42,42,-77,-35,-34,-31,-33,42,-32,]),'IF':([25,33,34,35,36,37,38,52,53,75,76,122,126,131,132,138,151,158,159,160,171,172,173,177,179,185,189,],[43,43,43,43,43,43,43,43,43,43,43,-19,-24,-76,43,43,-75,43,43,43,-77,-35,-34,-31,-33,43,-32,]),'WHILE':([25,33,34,35,36,37,38,52,53,75,76,122,126,131,132,138,151,158,159,160,171,172,173,177,179,185,189,],[44,44,44,44,44,44,44,44,44,44,44,-19,-24,-76,44,44,-75,44,44,44,-77,-35,-34,-31,-33,44,-32,]),'FOR':([25,33,34,35,36,37,38,52,53,75,76,122,126,131,132,138,151,158,159,160,171,172,173,177,179,185,189,],[45,45,45,45,45,45,45,45,45,45,45,-19,-24,-76,45,45,-75,45,45,45,-77,-35,-34,-31,-33,45,-32,]),'RETURN':([25,33,34,35,36,37,38,39,52,53,56,57,58,59,73,74,75,76,104,105,122,126,131,132,138,151,155,158,159,160,171,172,173,177,179,185,189,],[46,46,46,46,46,46,46,-15,46,46,-11,-12,-13,-14,-7,-8,46,46,-9,-10,-19,-24,-76,46,46,-75,46,46,46,46,-77,-35,-34,-31,-33,46,-32,]),'RIGHTBR':([25,30,35,36,37,38,39,52,53,56,57,58,59,73,74,75,76,104,105,131,132,151,152,158,159,160,164,165,166,170,171,172,173,177,179,185,187,189,],[-77,51,-77,-77,-77,-77,-15,-77,-77,-11,-12,-13,-14,-7,-8,-77,-77,-9,-10,-76,-77,-75,161,-77,-77,-77,171,172,173,176,-77,-35,-34,-31,-33,-77,189,-32,]),'EQUAL':([40,68,120,],[60,60,145,]),'LEFTSQR':([40,60,61,62,64,65,66,68,69,77,82,106,107,108,109,110,111,112,113,114,115,116,117,127,145,175,],[61,82,82,82,82,82,82,61,82,107,82,82,82,-45,-46,-47,-48,-49,-50,-51,-52,82,82,82,82,184,]),'CTE_INT':([60,61,62,64,65,66,69,82,97,106,107,108,109,110,111,112,113,114,115,116,117,127,145,184,],[83,83,83,92,83,83,83,119,130,83,83,-45,-46,-47,-48,-49,-50,-51,-52,83,83,92,83,186,]),'CTE_FLOT':([60,61,62,64,65,66,69,82,106,107,108,109,110,111,112,113,114,115,116,117,127,145,],[84,84,84,93,84,84,84,84,84,84,-45,-46,-47,-48,-49,-50,-51,-52,84,84,93,84,]),'CTE_STRING':([64,127,],[91,91,]),'TO':([67,77,78,80,81,83,84,121,139,141,142,156,157,],[97,-39,-16,-42,-40,-43,-44,-18,-36,-37,-38,-41,-17,]),'RIGHTSQR':([77,80,81,83,84,85,118,119,121,139,140,141,142,156,186,],[-39,-42,-40,-43,-44,120,143,144,-18,-36,156,-37,-38,-41,188,]),'COMMA':([77,80,81,83,84,88,90,91,92,93,94,102,121,139,141,142,156,162,175,188,],[-39,-42,-40,-43,-44,124,127,-27,-28,-29,-30,136,-18,-36,-37,-38,-41,168,168,168,]),'PLUS':([77,79,80,83,84,92,93,119,143,144,],[108,108,108,-43,-44,-43,-44,-43,-64,-65,]),'REST':([77,79,80,83,84,92,93,119,143,144,],[109,109,109,-43,-44,-43,-44,-43,-64,-65,]),'TIMES':([77,79,80,83,84,92,93,119,143,144,],[110,110,110,-43,-44,-43,-44,-43,-64,-65,]),'DIVIDE':([77,79,80,83,84,92,93,119,143,144,],[111,111,111,-43,-44,-43,-44,-43,-64,-65,]),'GREATER':([77,79,80,83,84,92,93,119,143,144,],[112,112,112,-43,-44,-43,-44,-43,-64,-65,]),'GREATERAND':([77,79,80,83,84,92,93,119,143,144,],[113,113,113,-43,-44,-43,-44,-43,-64,-65,]),'LESSER':([77,79,80,83,84,92,93,119,143,144,],[114,114,114,-43,-44,-43,-44,-43,-64,-65,]),'LESSERAND':([77,79,80,83,84,92,93,119,143,144,],[115,115,115,-43,-44,-43,-44,-43,-64,-65,]),'THEN':([128,],[148,]),'DO':([129,130,],[149,150,]),'ELSE':([171,],[178,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'program1':([4,],[5,]),'principal':([4,10,],[7,14,]),'program2':([4,],[8,]),'functions':([6,21,23,],[10,26,28,]),'empty':([6,21,23,25,27,29,33,34,35,36,37,38,52,53,70,72,75,76,88,102,132,136,138,158,159,160,162,171,174,175,185,188,],[12,12,12,39,49,49,39,39,39,39,39,39,39,39,101,101,39,39,125,137,39,49,39,39,39,39,169,179,182,169,39,169,]),'typing':([11,27,29,100,136,174,],[16,48,48,134,48,134,]),'voidfunction':([15,],[21,]),'typefunction':([16,],[23,]),'statutes':([25,33,34,35,36,37,38,52,53,75,76,132,138,158,159,160,185,],[30,54,55,56,57,58,59,73,74,104,105,152,155,164,165,166,187,]),'assign':([25,33,34,35,36,37,38,45,52,53,75,76,132,138,158,159,160,185,],[31,31,31,31,31,31,31,67,31,31,31,31,31,31,31,31,31,31,]),'callFunction':([25,33,34,35,36,37,38,52,53,60,61,62,64,65,66,69,75,76,82,106,107,116,117,127,132,138,145,158,159,160,185,],[32,32,32,32,32,32,32,32,32,81,81,81,81,81,81,81,32,32,81,81,81,81,81,81,32,32,81,32,32,32,32,]),'reading':([25,33,34,35,36,37,38,52,53,75,76,132,138,158,159,160,185,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'writing':([25,33,34,35,36,37,38,52,53,75,76,132,138,158,159,160,185,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'if':([25,33,34,35,36,37,38,52,53,75,76,132,138,158,159,160,185,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'while':([25,33,34,35,36,37,38,52,53,75,76,132,138,158,159,160,185,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'for':([25,33,34,35,36,37,38,52,53,75,76,132,138,158,159,160,185,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'return':([25,33,34,35,36,37,38,52,53,75,76,132,138,155,158,159,160,185,],[38,38,38,38,38,38,38,38,38,38,38,38,38,163,38,38,38,38,]),'args':([27,29,136,],[47,50,154,]),'exp':([60,61,62,64,65,66,69,82,106,107,116,117,127,145,],[78,85,86,94,95,96,98,118,139,140,141,142,94,157,]),'array':([60,61,62,64,65,66,69,82,106,107,116,117,127,145,],[79,79,79,79,79,79,79,79,79,79,79,79,79,79,]),'constants':([60,61,62,64,65,66,69,82,106,107,116,117,127,145,],[80,80,80,80,80,80,80,80,80,80,80,80,80,80,]),'reading1':([63,124,],[87,146,]),'writing1':([64,],[89,]),'writing2':([64,127,],[90,147,]),'vars':([70,72,],[99,103,]),'expression':([77,79,80,],[106,116,117,]),'reading2':([88,],[123,]),'vars1':([100,174,],[133,181,]),'argsplural':([102,],[135,]),'variables':([162,175,188,],[167,183,190,]),'else':([171,],[177,]),'vars2':([174,],[180,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMICOLON program1','program',4,'p_PROGRAM','myParser.py',26),
  ('program1 -> VARS functions principal','program1',3,'p_program1','myParser.py',32),
  ('program1 -> VARS functions','program1',2,'p_program1','myParser.py',33),
  ('program1 -> program2','program1',1,'p_program1','myParser.py',34),
  ('program2 -> principal','program2',1,'p_program2','myParser.py',39),
  ('principal -> PRINCIPAL LEFTPAR RIGHTPAR LEFTBR statutes RIGHTBR','principal',6,'p_PRINCIPAL','myParser.py',44),
  ('statutes -> assign SEMICOLON statutes','statutes',3,'p_STATUTES','myParser.py',50),
  ('statutes -> callFunction SEMICOLON statutes','statutes',3,'p_STATUTES','myParser.py',51),
  ('statutes -> reading statutes SEMICOLON statutes','statutes',4,'p_STATUTES','myParser.py',52),
  ('statutes -> writing statutes SEMICOLON statutes','statutes',4,'p_STATUTES','myParser.py',53),
  ('statutes -> if statutes','statutes',2,'p_STATUTES','myParser.py',54),
  ('statutes -> while statutes','statutes',2,'p_STATUTES','myParser.py',55),
  ('statutes -> for statutes','statutes',2,'p_STATUTES','myParser.py',56),
  ('statutes -> return statutes','statutes',2,'p_STATUTES','myParser.py',57),
  ('statutes -> empty','statutes',1,'p_STATUTES','myParser.py',58),
  ('assign -> ID EQUAL exp','assign',3,'p_ASSIGN','myParser.py',63),
  ('assign -> ID LEFTSQR exp RIGHTSQR EQUAL exp','assign',6,'p_ASSIGN','myParser.py',64),
  ('callFunction -> ID LEFTPAR exp RIGHTPAR','callFunction',4,'p_CALLFUNCTION','myParser.py',69),
  ('reading -> READ LEFTPAR reading1 RIGHTPAR','reading',4,'p_READING','myParser.py',74),
  ('reading1 -> ID reading2','reading1',2,'p_READING1','myParser.py',79),
  ('reading2 -> COMMA reading1','reading2',2,'p_READING2','myParser.py',84),
  ('reading2 -> empty','reading2',1,'p_READING2','myParser.py',85),
  ('media -> MEDIA LEFTPAR array RIGHTPAR SEMICOLON','media',5,'p_MEDIA','myParser.py',90),
  ('writing -> WRITE LEFTPAR writing1 RIGHTPAR','writing',4,'p_WRITING','myParser.py',96),
  ('writing1 -> writing2 COMMA writing2','writing1',3,'p_WRITING1','myParser.py',101),
  ('writing1 -> writing2','writing1',1,'p_WRITING1','myParser.py',102),
  ('writing2 -> CTE_STRING','writing2',1,'p_WRITING2','myParser.py',107),
  ('writing2 -> CTE_INT','writing2',1,'p_WRITING2','myParser.py',108),
  ('writing2 -> CTE_FLOT','writing2',1,'p_WRITING2','myParser.py',109),
  ('writing2 -> exp','writing2',1,'p_WRITING2','myParser.py',110),
  ('if -> IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR else','if',9,'p_IF','myParser.py',117),
  ('else -> ELSE LEFTBR statutes RIGHTBR','else',4,'p_ELSE','myParser.py',122),
  ('else -> empty','else',1,'p_ELSE','myParser.py',123),
  ('for -> FOR assign TO CTE_INT DO LEFTBR statutes RIGHTBR','for',8,'p_FOR','myParser.py',130),
  ('while -> WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR','while',8,'p_WHILE','myParser.py',135),
  ('exp -> ID expression exp','exp',3,'p_EXP','myParser.py',142),
  ('exp -> array expression exp','exp',3,'p_EXP','myParser.py',143),
  ('exp -> constants expression exp','exp',3,'p_EXP','myParser.py',144),
  ('exp -> ID','exp',1,'p_EXP','myParser.py',145),
  ('exp -> callFunction','exp',1,'p_EXP','myParser.py',146),
  ('exp -> ID LEFTSQR exp RIGHTSQR','exp',4,'p_EXP','myParser.py',147),
  ('exp -> constants','exp',1,'p_EXP','myParser.py',148),
  ('constants -> CTE_INT','constants',1,'p_CONSTANTS','myParser.py',153),
  ('constants -> CTE_FLOT','constants',1,'p_CONSTANTS','myParser.py',154),
  ('expression -> PLUS','expression',1,'p_EXPRESSION','myParser.py',159),
  ('expression -> REST','expression',1,'p_EXPRESSION','myParser.py',160),
  ('expression -> TIMES','expression',1,'p_EXPRESSION','myParser.py',161),
  ('expression -> DIVIDE','expression',1,'p_EXPRESSION','myParser.py',162),
  ('expression -> GREATER','expression',1,'p_EXPRESSION','myParser.py',163),
  ('expression -> GREATERAND','expression',1,'p_EXPRESSION','myParser.py',164),
  ('expression -> LESSER','expression',1,'p_EXPRESSION','myParser.py',165),
  ('expression -> LESSERAND','expression',1,'p_EXPRESSION','myParser.py',166),
  ('vars -> VARS vars1','vars',2,'p_VARS','myParser.py',173),
  ('vars -> empty','vars',1,'p_VARS','myParser.py',174),
  ('vars1 -> typing COLON ID variables SEMICOLON vars2','vars1',6,'p_VARS1','myParser.py',179),
  ('vars2 -> vars1','vars2',1,'p_VARS2','myParser.py',184),
  ('vars2 -> empty','vars2',1,'p_VARS2','myParser.py',185),
  ('variables -> COMMA ID variables','variables',3,'p_VARIABLES','myParser.py',190),
  ('variables -> COMMA ID LEFTSQR CTE_INT RIGHTSQR variables','variables',6,'p_VARIABLES','myParser.py',191),
  ('variables -> empty','variables',1,'p_VARIABLES','myParser.py',192),
  ('typing -> INT','typing',1,'p_TYPING','myParser.py',197),
  ('typing -> FLOT','typing',1,'p_TYPING','myParser.py',198),
  ('typing -> CHAR','typing',1,'p_TYPING','myParser.py',199),
  ('array -> LEFTSQR exp RIGHTSQR','array',3,'p_ARRAY','myParser.py',204),
  ('array -> LEFTSQR CTE_INT RIGHTSQR','array',3,'p_ARRAY','myParser.py',205),
  ('functions -> FUNCTION VOID voidfunction functions','functions',4,'p_FUNCTIONS','myParser.py',212),
  ('functions -> FUNCTION typing typefunction functions','functions',4,'p_FUNCTIONS','myParser.py',213),
  ('functions -> empty','functions',1,'p_FUNCTIONS','myParser.py',214),
  ('voidfunction -> ID LEFTPAR args RIGHTPAR vars LEFTBR statutes RIGHTBR','voidfunction',8,'p_VOIDFUNCTION','myParser.py',219),
  ('typefunction -> ID LEFTPAR args RIGHTPAR vars LEFTBR statutes return SEMICOLON RIGHTBR','typefunction',10,'p_TYPEFUNCTION','myParser.py',224),
  ('args -> typing COLON ID argsplural','args',4,'p_ARGS','myParser.py',229),
  ('args -> empty','args',1,'p_ARGS','myParser.py',230),
  ('argsplural -> COMMA args','argsplural',2,'p_ARGSPLURAL','myParser.py',235),
  ('argsplural -> empty','argsplural',1,'p_ARGSPLURAL','myParser.py',236),
  ('return -> RETURN LEFTPAR exp RIGHTPAR SEMICOLON','return',5,'p_RETURN','myParser.py',241),
  ('return -> RETURN LEFTPAR exp RIGHTPAR','return',4,'p_RETURN','myParser.py',242),
  ('empty -> <empty>','empty',0,'p_empty','myParser.py',253),
]
