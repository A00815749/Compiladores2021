
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'PROGRAM PRINCIPAL VARS INT FLOAT CHAR ID FUNCTION RETURN READ WRITE IF THEN ELSE WHILE DO FOR TO VOID MEDIA MODA VARIANZA REGRESIONSIMPLE PLOTXY PLUS REST TIMES DIVIDE AND OR GREATER GREATERAND LESSER LESSERAND SAME NOTSAME EQUAL LEFTBR RIGHTBR LEFTPAR RIGHTPAR LEFTSQR RIGHTSQR COLON SEMICOLON COMMA DOT QUOT CTEINT CTEFLOAT CTESTRING CTECHAR nl\n        program : PROGRAM ID SEMICOLON programprep program1\n        \n        programprep :\n        \n        program1 : vars mainquad functions jumpprogram principalaux\n                | vars mainquad functions \n                | principalaux\n        \n        principalaux : principal\n        \n        principal : PRINCIPAL LEFTPAR storefunct RIGHTPAR LEFTBR vars statutes RIGHTBR\n        \n        mainquad :\n        \n        jumpprogram :\n        \n        statutes : assign SEMICOLON statutes\n                | callFunction SEMICOLON statutes\n                | reading statutes SEMICOLON statutes\n                | writing statutes SEMICOLON statutes\n                | if statutes\n                | while statutes\n                | for statutes\n                | return statutes\n                | empty\n        \n        assign : ID idgetter EQUAL operatorhandler exp assignquad\n                | ID idgetter array EQUAL operatorhandler exp assignquad\n        \n        idgetter :\n        \n        idgetterarray :\n        \n        assignquad :\n        \n        callFunction : ID checkid eraquad LEFTPAR paramexp checkparam RIGHTPAR quadgosub\n        \n        checkid :\n        \n        eraquad :\n        \n        paramexp : exp paramquad paramaux\n                | exp paramquad COMMA paramaux paramexp\n                | empty\n        \n        paramaux :\n        \n        paramquad : \n        \n        checkparam :\n        \n        quadgosub :\n        \n        reading : READ auxreading LEFTPAR reading1 RIGHTPAR\n        \n        reading1 : reading2\n                | empty\n        \n        reading2 : exp readingquad\n                | exp readingquad COMMA auxreading reading2\n        \n        auxreading : \n        \n        readingquad :\n        \n        writing : WRITE auxwriting LEFTPAR writing1 RIGHTPAR\n        \n        writing1 : writing2\n                | empty\n        \n        writing2 : exp writingquad\n                | exp writingquad COMMA auxwriting writing2\n        \n        auxwriting : \n        \n        writingquad : \n        \n        media : MEDIA LEFTPAR array RIGHTPAR SEMICOLON\n        \n        if : IF LEFTPAR exp RIGHTPAR quadif THEN LEFTBR statutes RIGHTBR else endif\n        \n        else : ELSE quadelse LEFTBR statutes RIGHTBR\n                | empty\n        \n        quadif :\n        \n        endif :\n        \n        quadelse : \n        \n        endofloop :\n        \n        for : FOR auxfor assign TO CTEINT DO quadfor LEFTBR statutes RIGHTBR endofloop\n        \n        auxfor :\n        \n        quadfor :\n        \n        while : WHILE auxwhile LEFTPAR exp RIGHTPAR DO quadwhile LEFTBR statutes RIGHTBR endofloop\n        \n        auxwhile :\n        \n        quadwhile :\n        \n        exp : andexp quador\n            | andexp quador OR operatorhandler andexp\n        \n        quador :\n        \n        andexp : boolexp quadand\n            | boolexp quadand AND operatorhandler boolexp\n        \n        quadand :\n        \n        boolexp : arithexp \n            | boolexp1 arithexp\n        \n        boolexp1 : arithexp LESSER operatorhandler arithexp quadbool\n            | arithexp LESSERAND operatorhandler arithexp quadbool\n            | arithexp GREATER operatorhandler arithexp quadbool\n            | arithexp GREATERAND operatorhandler arithexp quadbool\n            | arithexp NOTSAME operatorhandler arithexp quadbool\n        \n        quadbool :\n        \n        arithexp : geoexp\n            | geoexp PLUS operatorhandler geoexp quadarith\n            | geoexp REST operatorhandler geoexp quadarith\n        \n        quadarith :\n        \n        geoexp : assignedexp\n            | assignedexp TIMES operatorhandler assignedexp quadgeo\n            | assignedexp DIVIDE operatorhandler assignedexp quadgeo\n        \n        quadgeo :\n        \n        assignedexp : ID idgetter\n                    | CTEINT cteaux\n                    | CTEFLOAT cteaux\n                    | CTECHAR cteaux\n                    | CTESTRING cteaux\n                    | callFunction\n                    | LEFTPAR exp RIGHTPAR\n                    | ID array idgetterarray\n                    | empty\n        \n        cteaux :\n        \n        operatorhandler : \n        \n        vars : vars0\n            | empty\n        \n        vars0 : VARS vars1\n        \n        vars1 : vars1 typing COLON vars2 SEMICOLON addVar\n                | empty\n        \n        vars2 : ID\n                | ID array\n                | ID COMMA vars2 addVar\n                | ID array COMMA vars2 addVar\n                | empty\n        \n        addVar : \n        \n        typing : INT saveTypeofVar\n                | CHAR saveTypeofVar\n                | FLOAT saveTypeofVar\n        \n        saveTypeofVar :\n        \n        array : LEFTSQR exp RIGHTSQR\n                | LEFTSQR CTEINT RIGHTSQR\n        \n        functions : FUNCTION VOID functions1 funcend functions\n                    | FUNCTION INT functions1 funcend functions\n                    | FUNCTION FLOAT functions1 funcend functions\n                    | FUNCTION CHAR functions1 funcend functions\n                    | empty\n        \n        functions1 : ID storefunct LEFTPAR args RIGHTPAR vars LEFTBR setaddstart statutes RIGHTBR \n                    | empty\n        \n        setaddstart : \n        \n        args : args1\n            | empty\n        \n        args1 : INT saveTypeofVar COLON ID mulParam nextParam\n                | FLOAT saveTypeofVar COLON ID mulParam nextParam\n                | CHAR saveTypeofVar COLON ID mulParam nextParam\n        \n        nextParam : COMMA args1\n                | empty\n        \n        mulParam :\n        \n        funcend :\n        \n        storefunct :\n        \n        return : RETURN LEFTPAR exp RIGHTPAR SEMICOLON\n                | RETURN LEFTPAR exp RIGHTPAR\n        \n        empty : \n        '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,4,5,6,7,8,9,10,11,12,14,15,16,18,20,27,28,29,30,36,37,39,40,41,42,47,49,50,51,52,57,59,60,61,62,128,264,],[0,-2,-132,-1,-8,-5,-95,-96,-6,-132,-132,-97,-99,-4,-116,-132,-132,-132,-132,-3,-128,-118,-128,-128,-128,-132,-132,-132,-132,-105,-112,-113,-114,-115,-98,-7,-117,]),'ID':([2,9,10,12,15,16,27,28,29,30,31,46,52,54,55,56,62,63,70,71,72,73,74,75,76,77,78,79,83,84,85,86,87,88,95,105,106,107,110,111,112,113,114,116,117,118,119,120,121,122,124,125,126,129,130,140,142,143,149,150,151,152,153,154,155,156,157,158,159,160,162,165,166,167,169,170,172,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,194,195,207,208,214,215,216,217,218,219,220,221,222,227,228,230,235,236,244,245,255,257,259,260,261,266,267,271,272,274,277,279,280,281,282,284,285,286,288,],[3,-95,-96,-132,-97,-99,38,38,38,38,44,-132,-105,44,73,90,-98,44,73,-76,-80,-21,-93,-93,-93,-89,73,-92,90,90,90,90,90,90,-57,-110,-111,-85,-94,-94,-94,-94,-94,-93,-94,-94,-94,-94,-84,-22,-86,-87,-88,90,90,73,174,73,-94,-94,73,73,73,73,73,73,73,73,73,-91,-90,90,90,-94,73,73,73,209,210,211,73,73,-75,-75,-75,-75,-75,-79,-79,-83,-83,73,73,-94,-131,-119,-70,-71,-72,-73,-74,-77,-78,-81,-82,73,-34,-41,-130,90,-39,-46,-33,-30,73,73,90,-24,73,90,90,-132,-53,-51,-55,-55,-49,-59,-56,90,-50,]),'SEMICOLON':([3,31,43,44,45,53,54,63,64,67,68,69,70,71,72,73,74,75,76,77,79,81,82,83,84,85,86,87,88,89,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,124,125,126,129,130,131,132,133,134,135,136,148,149,150,151,152,153,154,155,156,157,158,159,160,162,163,164,165,166,167,180,181,182,183,184,185,186,187,188,189,190,192,193,194,195,207,212,213,214,215,216,217,218,219,220,221,222,226,227,228,230,235,242,243,255,258,266,274,277,279,280,281,282,284,285,288,],[4,-132,52,-100,-104,-101,-132,-132,-105,-64,-67,-68,-132,-76,-80,-21,-93,-93,-93,-89,-92,129,130,-132,-132,-132,-132,-132,-132,-18,-105,-102,-110,-111,-85,-62,-65,-94,-94,-94,-94,-94,-69,-93,-94,-94,-94,-94,-84,-22,-86,-87,-88,-132,-132,165,166,-14,-15,-16,-17,-103,-94,-94,-132,-132,-132,-132,-132,-132,-132,-132,-132,-91,-90,-10,-11,-132,-132,-94,-132,-132,-75,-75,-75,-75,-75,-79,-79,-83,-83,-12,-13,-132,-94,235,-63,-66,-70,-71,-72,-73,-74,-77,-78,-81,-82,-23,-132,-34,-41,-130,-19,-23,-33,-20,-24,-132,-53,-51,-55,-55,-49,-59,-56,-50,]),'VARS':([4,5,46,144,],[-2,12,12,12,]),'PRINCIPAL':([4,5,7,9,10,12,14,15,16,18,20,26,27,28,29,30,37,39,40,41,42,47,49,50,51,52,57,59,60,61,62,264,],[-2,13,-8,-95,-96,-132,-132,-97,-99,-9,-116,13,-132,-132,-132,-132,-128,-118,-128,-128,-128,-132,-132,-132,-132,-105,-112,-113,-114,-115,-98,-117,]),'FUNCTION':([4,5,7,9,10,12,14,15,16,27,28,29,30,37,39,40,41,42,47,49,50,51,52,62,264,],[-2,-132,-8,-95,-96,-132,19,-97,-99,-132,-132,-132,-132,-128,-118,-128,-128,-128,19,19,19,19,-105,-98,-117,]),'READ':([9,10,12,15,16,46,52,56,62,83,84,85,86,87,88,129,130,165,166,207,208,228,230,235,236,261,271,272,274,277,279,280,281,282,284,285,286,288,],[-95,-96,-132,-97,-99,-132,-105,91,-98,91,91,91,91,91,91,91,91,91,91,-131,-119,-34,-41,-130,91,91,91,91,-132,-53,-51,-55,-55,-49,-59,-56,91,-50,]),'WRITE':([9,10,12,15,16,46,52,56,62,83,84,85,86,87,88,129,130,165,166,207,208,228,230,235,236,261,271,272,274,277,279,280,281,282,284,285,286,288,],[-95,-96,-132,-97,-99,-132,-105,92,-98,92,92,92,92,92,92,92,92,92,92,-131,-119,-34,-41,-130,92,92,92,92,-132,-53,-51,-55,-55,-49,-59,-56,92,-50,]),'IF':([9,10,12,15,16,46,52,56,62,83,84,85,86,87,88,129,130,165,166,207,208,228,230,235,236,261,271,272,274,277,279,280,281,282,284,285,286,288,],[-95,-96,-132,-97,-99,-132,-105,93,-98,93,93,93,93,93,93,93,93,93,93,-131,-119,-34,-41,-130,93,93,93,93,-132,-53,-51,-55,-55,-49,-59,-56,93,-50,]),'WHILE':([9,10,12,15,16,46,52,56,62,83,84,85,86,87,88,129,130,165,166,207,208,228,230,235,236,261,271,272,274,277,279,280,281,282,284,285,286,288,],[-95,-96,-132,-97,-99,-132,-105,94,-98,94,94,94,94,94,94,94,94,94,94,-131,-119,-34,-41,-130,94,94,94,94,-132,-53,-51,-55,-55,-49,-59,-56,94,-50,]),'FOR':([9,10,12,15,16,46,52,56,62,83,84,85,86,87,88,129,130,165,166,207,208,228,230,235,236,261,271,272,274,277,279,280,281,282,284,285,286,288,],[-95,-96,-132,-97,-99,-132,-105,95,-98,95,95,95,95,95,95,95,95,95,95,-131,-119,-34,-41,-130,95,95,95,95,-132,-53,-51,-55,-55,-49,-59,-56,95,-50,]),'RETURN':([9,10,12,15,16,46,52,56,62,83,84,85,86,87,88,129,130,165,166,207,208,228,230,235,236,261,271,272,274,277,279,280,281,282,284,285,286,288,],[-95,-96,-132,-97,-99,-132,-105,96,-98,96,96,96,96,96,96,96,96,96,96,-131,-119,-34,-41,-130,96,96,96,96,-132,-53,-51,-55,-55,-49,-59,-56,96,-50,]),'RIGHTBR':([9,10,12,15,16,46,52,56,62,80,85,86,87,88,89,129,130,133,134,135,136,163,164,165,166,192,193,207,208,235,236,249,261,270,271,272,274,275,276,277,279,280,281,282,284,285,286,287,288,],[-95,-96,-132,-97,-99,-132,-105,-132,-98,128,-132,-132,-132,-132,-18,-132,-132,-14,-15,-16,-17,-10,-11,-132,-132,-12,-13,-131,-119,-130,-132,264,-132,274,-132,-132,-132,280,281,-53,-51,-55,-55,-49,-59,-56,-132,288,-50,]),'LEFTBR':([9,10,12,15,16,35,52,62,144,176,246,247,248,262,263,278,283,],[-95,-96,-132,-97,-99,46,-105,-98,-132,208,261,-61,-58,271,272,-54,286,]),'INT':([12,15,16,19,52,58,62,251,],[-132,22,-99,28,-105,100,-98,100,]),'CHAR':([12,15,16,19,52,58,62,251,],[-132,23,-99,30,-105,102,-98,102,]),'FLOAT':([12,15,16,19,52,58,62,251,],[-132,24,-99,29,-105,101,-98,101,]),'LEFTPAR':([13,38,48,55,70,71,72,73,74,75,76,77,78,79,90,91,92,93,94,96,105,106,107,110,111,112,113,114,116,117,118,119,120,121,122,123,124,125,126,138,139,140,141,143,149,150,151,152,153,154,155,156,157,158,159,160,161,162,167,169,170,172,180,181,182,183,184,185,186,187,188,189,190,191,194,195,214,215,216,217,218,219,220,221,222,227,244,245,255,257,259,260,266,267,],[17,-129,58,78,78,-76,-80,-21,-93,-93,-93,-89,78,-92,-25,-39,-46,140,-60,143,-110,-111,-85,-94,-94,-94,-94,-94,-93,-94,-94,-94,-94,-84,-22,-26,-86,-87,-88,169,170,78,172,78,-94,-94,78,78,78,78,78,78,78,78,78,-91,191,-90,-94,78,78,78,78,78,-75,-75,-75,-75,-75,-79,-79,-83,-83,78,78,-94,-70,-71,-72,-73,-74,-77,-78,-81,-82,78,-39,-46,-33,-30,78,78,-24,78,]),'RIGHTPAR':([17,25,58,67,68,69,70,71,72,73,74,75,76,77,78,79,97,98,99,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,124,125,126,127,140,143,149,150,151,152,153,154,155,156,157,158,159,160,162,169,170,171,172,175,180,181,182,183,184,185,186,187,188,189,190,191,196,197,198,199,200,201,202,203,205,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,229,231,237,238,239,240,241,244,245,250,252,253,254,255,256,257,259,260,265,266,267,268,269,273,],[-129,35,-132,-64,-67,-68,-132,-76,-80,-21,-93,-93,-93,-89,-132,-92,144,-120,-121,-110,-111,-85,-62,-65,-94,-94,-94,-94,-94,-69,-93,-94,-94,-94,-94,-84,-22,-86,-87,-88,162,-132,-132,-94,-94,-132,-132,-132,-132,-132,-132,-132,-132,-132,-91,-90,-132,-132,204,-132,207,-132,-132,-75,-75,-75,-75,-75,-79,-79,-83,-83,-132,228,-35,-36,-40,230,-42,-43,-47,233,-127,-127,-127,-63,-66,-70,-71,-72,-73,-74,-77,-78,-81,-82,-32,-31,-29,-37,-44,-132,-132,-132,255,-30,-39,-46,-122,-126,-123,-124,-33,-27,-30,-132,-132,-125,-24,-132,-38,-45,-28,]),'VOID':([19,],[27,]),'COLON':([21,22,23,24,32,33,34,100,101,102,145,146,147,],[31,-109,-109,-109,-106,-107,-108,-109,-109,-109,177,178,179,]),'COMMA':([44,53,67,68,69,70,71,72,73,74,75,76,77,79,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,124,125,126,149,150,151,152,153,154,155,156,157,158,159,160,162,169,170,180,181,182,183,184,185,186,187,188,189,190,191,198,199,202,203,209,210,211,212,213,214,215,216,217,218,219,220,221,222,224,225,229,231,237,238,239,241,244,245,255,257,259,260,266,267,],[54,63,-64,-67,-68,-132,-76,-80,-21,-93,-93,-93,-89,-92,-110,-111,-85,-62,-65,-94,-94,-94,-94,-94,-69,-93,-94,-94,-94,-94,-84,-22,-86,-87,-88,-94,-94,-132,-132,-132,-132,-132,-132,-132,-132,-132,-91,-90,-132,-132,-132,-132,-75,-75,-75,-75,-75,-79,-79,-83,-83,-132,-92,-40,-92,-47,-127,-127,-127,-63,-66,-70,-71,-72,-73,-74,-77,-78,-81,-82,-31,-92,244,245,251,251,251,257,-39,-46,-33,-30,-132,-132,-24,-132,]),'LEFTSQR':([44,73,90,137,174,],[55,55,-21,55,-21,]),'CTEINT':([55,70,71,72,73,74,75,76,77,78,79,105,106,107,110,111,112,113,114,116,117,118,119,120,121,122,124,125,126,140,143,149,150,151,152,153,154,155,156,157,158,159,160,162,167,169,170,172,180,181,182,183,184,185,186,187,188,189,190,191,194,195,206,214,215,216,217,218,219,220,221,222,227,244,245,255,257,259,260,266,267,],[66,116,-76,-80,-21,-93,-93,-93,-89,116,-92,-110,-111,-85,-94,-94,-94,-94,-94,-93,-94,-94,-94,-94,-84,-22,-86,-87,-88,116,116,-94,-94,116,116,116,116,116,116,116,116,116,-91,-90,-94,116,116,116,116,116,-75,-75,-75,-75,-75,-79,-79,-83,-83,116,116,-94,234,-70,-71,-72,-73,-74,-77,-78,-81,-82,116,-39,-46,-33,-30,116,116,-24,116,]),'CTEFLOAT':([55,70,71,72,73,74,75,76,77,78,79,105,106,107,110,111,112,113,114,116,117,118,119,120,121,122,124,125,126,140,143,149,150,151,152,153,154,155,156,157,158,159,160,162,167,169,170,172,180,181,182,183,184,185,186,187,188,189,190,191,194,195,214,215,216,217,218,219,220,221,222,227,244,245,255,257,259,260,266,267,],[74,74,-76,-80,-21,-93,-93,-93,-89,74,-92,-110,-111,-85,-94,-94,-94,-94,-94,-93,-94,-94,-94,-94,-84,-22,-86,-87,-88,74,74,-94,-94,74,74,74,74,74,74,74,74,74,-91,-90,-94,74,74,74,74,74,-75,-75,-75,-75,-75,-79,-79,-83,-83,74,74,-94,-70,-71,-72,-73,-74,-77,-78,-81,-82,74,-39,-46,-33,-30,74,74,-24,74,]),'CTECHAR':([55,70,71,72,73,74,75,76,77,78,79,105,106,107,110,111,112,113,114,116,117,118,119,120,121,122,124,125,126,140,143,149,150,151,152,153,154,155,156,157,158,159,160,162,167,169,170,172,180,181,182,183,184,185,186,187,188,189,190,191,194,195,214,215,216,217,218,219,220,221,222,227,244,245,255,257,259,260,266,267,],[75,75,-76,-80,-21,-93,-93,-93,-89,75,-92,-110,-111,-85,-94,-94,-94,-94,-94,-93,-94,-94,-94,-94,-84,-22,-86,-87,-88,75,75,-94,-94,75,75,75,75,75,75,75,75,75,-91,-90,-94,75,75,75,75,75,-75,-75,-75,-75,-75,-79,-79,-83,-83,75,75,-94,-70,-71,-72,-73,-74,-77,-78,-81,-82,75,-39,-46,-33,-30,75,75,-24,75,]),'CTESTRING':([55,70,71,72,73,74,75,76,77,78,79,105,106,107,110,111,112,113,114,116,117,118,119,120,121,122,124,125,126,140,143,149,150,151,152,153,154,155,156,157,158,159,160,162,167,169,170,172,180,181,182,183,184,185,186,187,188,189,190,191,194,195,214,215,216,217,218,219,220,221,222,227,244,245,255,257,259,260,266,267,],[76,76,-76,-80,-21,-93,-93,-93,-89,76,-92,-110,-111,-85,-94,-94,-94,-94,-94,-93,-94,-94,-94,-94,-84,-22,-86,-87,-88,76,76,-94,-94,76,76,76,76,76,76,76,76,76,-91,-90,-94,76,76,76,76,76,-75,-75,-75,-75,-75,-79,-79,-83,-83,76,76,-94,-70,-71,-72,-73,-74,-77,-78,-81,-82,76,-39,-46,-33,-30,76,76,-24,76,]),'TIMES':([55,66,70,71,72,73,74,75,76,77,78,79,105,106,107,110,111,112,113,114,116,117,118,119,120,121,122,124,125,126,140,143,149,150,151,152,153,154,155,156,157,158,159,160,162,167,169,170,172,180,181,182,183,184,185,186,187,188,189,190,191,194,195,198,202,214,215,216,217,218,219,220,221,222,225,227,244,245,255,257,259,260,266,267,],[-132,-93,-132,-76,119,-21,-93,-93,-93,-89,-132,-92,-110,-111,-85,-94,-94,-94,-94,-94,-93,-94,-94,-94,-94,-84,-22,-86,-87,-88,-132,-132,-94,-94,-132,-132,-132,-132,-132,-132,-132,-132,-132,-91,-90,-94,-132,-132,-132,-132,-132,-75,-75,-75,-75,-75,-79,-79,-83,-83,-132,-132,-94,-92,-92,-70,-71,-72,-73,-74,-77,-78,-81,-82,-92,-132,-39,-46,-33,-30,-132,-132,-24,-132,]),'DIVIDE':([55,66,70,71,72,73,74,75,76,77,78,79,105,106,107,110,111,112,113,114,116,117,118,119,120,121,122,124,125,126,140,143,149,150,151,152,153,154,155,156,157,158,159,160,162,167,169,170,172,180,181,182,183,184,185,186,187,188,189,190,191,194,195,198,202,214,215,216,217,218,219,220,221,222,225,227,244,245,255,257,259,260,266,267,],[-132,-93,-132,-76,120,-21,-93,-93,-93,-89,-132,-92,-110,-111,-85,-94,-94,-94,-94,-94,-93,-94,-94,-94,-94,-84,-22,-86,-87,-88,-132,-132,-94,-94,-132,-132,-132,-132,-132,-132,-132,-132,-132,-91,-90,-94,-132,-132,-132,-132,-132,-75,-75,-75,-75,-75,-79,-79,-83,-83,-132,-132,-94,-92,-92,-70,-71,-72,-73,-74,-77,-78,-81,-82,-92,-132,-39,-46,-33,-30,-132,-132,-24,-132,]),'PLUS':([55,66,70,71,72,73,74,75,76,77,78,79,105,106,107,110,111,112,113,114,116,117,118,119,120,121,122,124,125,126,140,143,149,150,151,152,153,154,155,156,157,158,159,160,162,167,169,170,172,180,181,182,183,184,185,186,187,188,189,190,191,194,195,198,202,214,215,216,217,218,219,220,221,222,225,227,244,245,255,257,259,260,266,267,],[-132,-93,-132,117,-80,-21,-93,-93,-93,-89,-132,-92,-110,-111,-85,-94,-94,-94,-94,-94,-93,-94,-94,-94,-94,-84,-22,-86,-87,-88,-132,-132,-94,-94,-132,-132,-132,-132,-132,-132,-132,-132,-132,-91,-90,-94,-132,-132,-132,-132,-132,-75,-75,-75,-75,-75,-79,-79,-83,-83,-132,-132,-94,-92,-92,-70,-71,-72,-73,-74,-77,-78,-81,-82,-92,-132,-39,-46,-33,-30,-132,-132,-24,-132,]),'REST':([55,66,70,71,72,73,74,75,76,77,78,79,105,106,107,110,111,112,113,114,116,117,118,119,120,121,122,124,125,126,140,143,149,150,151,152,153,154,155,156,157,158,159,160,162,167,169,170,172,180,181,182,183,184,185,186,187,188,189,190,191,194,195,198,202,214,215,216,217,218,219,220,221,222,225,227,244,245,255,257,259,260,266,267,],[-132,-93,-132,118,-80,-21,-93,-93,-93,-89,-132,-92,-110,-111,-85,-94,-94,-94,-94,-94,-93,-94,-94,-94,-94,-84,-22,-86,-87,-88,-132,-132,-94,-94,-132,-132,-132,-132,-132,-132,-132,-132,-132,-91,-90,-94,-132,-132,-132,-132,-132,-75,-75,-75,-75,-75,-79,-79,-83,-83,-132,-132,-94,-92,-92,-70,-71,-72,-73,-74,-77,-78,-81,-82,-92,-132,-39,-46,-33,-30,-132,-132,-24,-132,]),'LESSER':([55,66,69,71,72,73,74,75,76,77,78,79,105,106,107,116,117,118,119,120,121,122,124,125,126,140,143,149,150,156,157,158,159,160,162,167,169,170,172,180,181,187,188,189,190,191,194,195,198,202,219,220,221,222,225,227,244,245,255,257,259,260,266,267,],[-132,-93,110,-76,-80,-21,-93,-93,-93,-89,-132,-92,-110,-111,-85,-93,-94,-94,-94,-94,-84,-22,-86,-87,-88,-132,-132,-94,-94,-132,-132,-132,-132,-91,-90,-94,-132,-132,-132,-132,-132,-79,-79,-83,-83,-132,-132,-94,-92,-92,-77,-78,-81,-82,-92,-132,-39,-46,-33,-30,-132,-132,-24,-132,]),'LESSERAND':([55,66,69,71,72,73,74,75,76,77,78,79,105,106,107,116,117,118,119,120,121,122,124,125,126,140,143,149,150,156,157,158,159,160,162,167,169,170,172,180,181,187,188,189,190,191,194,195,198,202,219,220,221,222,225,227,244,245,255,257,259,260,266,267,],[-132,-93,111,-76,-80,-21,-93,-93,-93,-89,-132,-92,-110,-111,-85,-93,-94,-94,-94,-94,-84,-22,-86,-87,-88,-132,-132,-94,-94,-132,-132,-132,-132,-91,-90,-94,-132,-132,-132,-132,-132,-79,-79,-83,-83,-132,-132,-94,-92,-92,-77,-78,-81,-82,-92,-132,-39,-46,-33,-30,-132,-132,-24,-132,]),'GREATER':([55,66,69,71,72,73,74,75,76,77,78,79,105,106,107,116,117,118,119,120,121,122,124,125,126,140,143,149,150,156,157,158,159,160,162,167,169,170,172,180,181,187,188,189,190,191,194,195,198,202,219,220,221,222,225,227,244,245,255,257,259,260,266,267,],[-132,-93,112,-76,-80,-21,-93,-93,-93,-89,-132,-92,-110,-111,-85,-93,-94,-94,-94,-94,-84,-22,-86,-87,-88,-132,-132,-94,-94,-132,-132,-132,-132,-91,-90,-94,-132,-132,-132,-132,-132,-79,-79,-83,-83,-132,-132,-94,-92,-92,-77,-78,-81,-82,-92,-132,-39,-46,-33,-30,-132,-132,-24,-132,]),'GREATERAND':([55,66,69,71,72,73,74,75,76,77,78,79,105,106,107,116,117,118,119,120,121,122,124,125,126,140,143,149,150,156,157,158,159,160,162,167,169,170,172,180,181,187,188,189,190,191,194,195,198,202,219,220,221,222,225,227,244,245,255,257,259,260,266,267,],[-132,-93,113,-76,-80,-21,-93,-93,-93,-89,-132,-92,-110,-111,-85,-93,-94,-94,-94,-94,-84,-22,-86,-87,-88,-132,-132,-94,-94,-132,-132,-132,-132,-91,-90,-94,-132,-132,-132,-132,-132,-79,-79,-83,-83,-132,-132,-94,-92,-92,-77,-78,-81,-82,-92,-132,-39,-46,-33,-30,-132,-132,-24,-132,]),'NOTSAME':([55,66,69,71,72,73,74,75,76,77,78,79,105,106,107,116,117,118,119,120,121,122,124,125,126,140,143,149,150,156,157,158,159,160,162,167,169,170,172,180,181,187,188,189,190,191,194,195,198,202,219,220,221,222,225,227,244,245,255,257,259,260,266,267,],[-132,-93,114,-76,-80,-21,-93,-93,-93,-89,-132,-92,-110,-111,-85,-93,-94,-94,-94,-94,-84,-22,-86,-87,-88,-132,-132,-94,-94,-132,-132,-132,-132,-91,-90,-94,-132,-132,-132,-132,-132,-79,-79,-83,-83,-132,-132,-94,-92,-92,-77,-78,-81,-82,-92,-132,-39,-46,-33,-30,-132,-132,-24,-132,]),'AND':([55,66,68,69,70,71,72,73,74,75,76,77,78,79,105,106,107,109,110,111,112,113,114,115,116,117,118,119,120,121,122,124,125,126,140,143,149,151,152,153,154,155,156,157,158,159,160,162,167,169,170,172,180,182,183,184,185,186,187,188,189,190,191,194,195,198,202,214,215,216,217,218,219,220,221,222,225,227,244,245,255,257,259,260,266,267,],[-132,-93,-67,-68,-132,-76,-80,-21,-93,-93,-93,-89,-132,-92,-110,-111,-85,150,-94,-94,-94,-94,-94,-69,-93,-94,-94,-94,-94,-84,-22,-86,-87,-88,-132,-132,-94,-132,-132,-132,-132,-132,-132,-132,-132,-132,-91,-90,-94,-132,-132,-132,-132,-75,-75,-75,-75,-75,-79,-79,-83,-83,-132,-132,-94,-92,-92,-70,-71,-72,-73,-74,-77,-78,-81,-82,-92,-132,-39,-46,-33,-30,-132,-132,-24,-132,]),'OR':([55,66,67,68,69,70,71,72,73,74,75,76,77,78,79,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,124,125,126,140,143,150,151,152,153,154,155,156,157,158,159,160,162,167,169,170,172,181,182,183,184,185,186,187,188,189,190,191,194,195,198,202,213,214,215,216,217,218,219,220,221,222,225,227,244,245,255,257,259,260,266,267,],[-132,-93,-64,-67,-68,-132,-76,-80,-21,-93,-93,-93,-89,-132,-92,-110,-111,-85,149,-65,-94,-94,-94,-94,-94,-69,-93,-94,-94,-94,-94,-84,-22,-86,-87,-88,-132,-132,-94,-132,-132,-132,-132,-132,-132,-132,-132,-132,-91,-90,-94,-132,-132,-132,-132,-75,-75,-75,-75,-75,-79,-79,-83,-83,-132,-132,-94,-92,-92,-66,-70,-71,-72,-73,-74,-77,-78,-81,-82,-92,-132,-39,-46,-33,-30,-132,-132,-24,-132,]),'RIGHTSQR':([55,65,66,67,68,69,70,71,72,73,74,75,76,77,79,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,124,125,126,149,150,151,152,153,154,155,156,157,158,159,160,162,180,181,182,183,184,185,186,187,188,189,190,212,213,214,215,216,217,218,219,220,221,222,255,266,],[-132,105,106,-64,-67,-68,-132,-76,-80,-21,-93,-93,-93,-89,-92,-110,-111,-85,-62,-65,-94,-94,-94,-94,-94,-69,-93,-94,-94,-94,-94,-84,-22,-86,-87,-88,-94,-94,-132,-132,-132,-132,-132,-132,-132,-132,-132,-91,-90,-132,-132,-75,-75,-75,-75,-75,-79,-79,-83,-83,-63,-66,-70,-71,-72,-73,-74,-77,-78,-81,-82,-33,-24,]),'TO':([67,68,69,70,71,72,73,74,75,76,77,79,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,124,125,126,149,150,151,152,153,154,155,156,157,158,159,160,162,167,173,180,181,182,183,184,185,186,187,188,189,190,194,195,212,213,214,215,216,217,218,219,220,221,222,226,227,242,243,255,258,266,],[-64,-67,-68,-132,-76,-80,-21,-93,-93,-93,-89,-92,-110,-111,-85,-62,-65,-94,-94,-94,-94,-94,-69,-93,-94,-94,-94,-94,-84,-22,-86,-87,-88,-94,-94,-132,-132,-132,-132,-132,-132,-132,-132,-132,-91,-90,-94,206,-132,-132,-75,-75,-75,-75,-75,-79,-79,-83,-83,-132,-94,-63,-66,-70,-71,-72,-73,-74,-77,-78,-81,-82,-23,-132,-19,-23,-33,-20,-24,]),'EQUAL':([90,105,106,137,168,174,],[-21,-110,-111,167,195,-21,]),'THEN':([204,232,],[-52,246,]),'DO':([233,234,],[247,248,]),'ELSE':([274,],[278,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'programprep':([4,],[5,]),'program1':([5,],[6,]),'vars':([5,46,144,],[7,56,176,]),'principalaux':([5,26,],[8,36,]),'vars0':([5,46,144,],[9,9,9,]),'empty':([5,12,14,27,28,29,30,31,46,47,49,50,51,54,55,56,58,63,70,78,83,84,85,86,87,88,129,130,140,143,144,151,152,153,154,155,156,157,158,159,165,166,169,170,172,180,181,191,194,227,236,237,238,239,259,260,261,267,271,272,274,286,],[10,16,20,39,39,39,39,45,10,20,20,20,20,45,79,89,99,45,79,79,89,89,89,89,89,89,89,89,79,79,10,79,79,79,79,79,79,79,79,79,89,89,198,202,79,79,79,225,79,79,89,252,252,252,79,79,89,225,89,89,279,89,]),'principal':([5,26,],[11,11,]),'mainquad':([7,],[14,]),'vars1':([12,],[15,]),'functions':([14,47,49,50,51,],[18,57,59,60,61,]),'typing':([15,],[21,]),'storefunct':([17,38,],[25,48,]),'jumpprogram':([18,],[26,]),'saveTypeofVar':([22,23,24,100,101,102,],[32,33,34,145,146,147,]),'functions1':([27,28,29,30,],[37,40,41,42,]),'vars2':([31,54,63,],[43,64,103,]),'funcend':([37,40,41,42,],[47,49,50,51,]),'array':([44,73,137,],[53,122,168,]),'addVar':([52,64,103,],[62,104,148,]),'exp':([55,78,140,143,169,170,172,191,194,227,259,260,267,],[65,127,171,175,199,203,205,224,226,243,199,203,224,]),'andexp':([55,78,140,143,169,170,172,180,191,194,227,259,260,267,],[67,67,67,67,67,67,67,212,67,67,67,67,67,67,]),'boolexp':([55,78,140,143,169,170,172,180,181,191,194,227,259,260,267,],[68,68,68,68,68,68,68,68,213,68,68,68,68,68,68,]),'arithexp':([55,70,78,140,143,151,152,153,154,155,169,170,172,180,181,191,194,227,259,260,267,],[69,115,69,69,69,182,183,184,185,186,69,69,69,69,69,69,69,69,69,69,69,]),'boolexp1':([55,78,140,143,169,170,172,180,181,191,194,227,259,260,267,],[70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,]),'geoexp':([55,70,78,140,143,151,152,153,154,155,156,157,169,170,172,180,181,191,194,227,259,260,267,],[71,71,71,71,71,71,71,71,71,71,187,188,71,71,71,71,71,71,71,71,71,71,71,]),'assignedexp':([55,70,78,140,143,151,152,153,154,155,156,157,158,159,169,170,172,180,181,191,194,227,259,260,267,],[72,72,72,72,72,72,72,72,72,72,72,72,189,190,72,72,72,72,72,72,72,72,72,72,72,]),'callFunction':([55,56,70,78,83,84,85,86,87,88,129,130,140,143,151,152,153,154,155,156,157,158,159,165,166,169,170,172,180,181,191,194,227,236,259,260,261,267,271,272,286,],[77,82,77,77,82,82,82,82,82,82,82,82,77,77,77,77,77,77,77,77,77,77,77,82,82,77,77,77,77,77,77,77,77,82,77,77,82,77,82,82,82,]),'statutes':([56,83,84,85,86,87,88,129,130,165,166,236,261,271,272,286,],[80,131,132,133,134,135,136,163,164,192,193,249,270,275,276,287,]),'assign':([56,83,84,85,86,87,88,129,130,142,165,166,236,261,271,272,286,],[81,81,81,81,81,81,81,81,81,173,81,81,81,81,81,81,81,]),'reading':([56,83,84,85,86,87,88,129,130,165,166,236,261,271,272,286,],[83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,]),'writing':([56,83,84,85,86,87,88,129,130,165,166,236,261,271,272,286,],[84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,]),'if':([56,83,84,85,86,87,88,129,130,165,166,236,261,271,272,286,],[85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,]),'while':([56,83,84,85,86,87,88,129,130,165,166,236,261,271,272,286,],[86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,]),'for':([56,83,84,85,86,87,88,129,130,165,166,236,261,271,272,286,],[87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,]),'return':([56,83,84,85,86,87,88,129,130,165,166,236,261,271,272,286,],[88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,]),'args':([58,],[97,]),'args1':([58,251,],[98,265,]),'cteaux':([66,74,75,76,116,],[107,124,125,126,107,]),'quador':([67,],[108,]),'quadand':([68,],[109,]),'idgetter':([73,90,174,],[121,137,137,]),'checkid':([73,90,],[123,123,]),'auxreading':([91,244,],[138,259,]),'auxwriting':([92,245,],[139,260,]),'auxwhile':([94,],[141,]),'auxfor':([95,],[142,]),'operatorhandler':([110,111,112,113,114,117,118,119,120,149,150,167,195,],[151,152,153,154,155,156,157,158,159,180,181,194,227,]),'idgetterarray':([122,],[160,]),'eraquad':([123,],[161,]),'reading1':([169,],[196,]),'reading2':([169,259,],[197,268,]),'writing1':([170,],[200,]),'writing2':([170,260,],[201,269,]),'quadbool':([182,183,184,185,186,],[214,215,216,217,218,]),'quadarith':([187,188,],[219,220,]),'quadgeo':([189,190,],[221,222,]),'paramexp':([191,267,],[223,273,]),'readingquad':([199,],[229,]),'writingquad':([203,],[231,]),'quadif':([204,],[232,]),'setaddstart':([208,],[236,]),'mulParam':([209,210,211,],[237,238,239,]),'checkparam':([223,],[240,]),'paramquad':([224,],[241,]),'assignquad':([226,243,],[242,258,]),'nextParam':([237,238,239,],[250,253,254,]),'paramaux':([241,257,],[256,267,]),'quadwhile':([247,],[262,]),'quadfor':([248,],[263,]),'quadgosub':([255,],[266,]),'else':([274,],[277,]),'endif':([277,],[282,]),'quadelse':([278,],[283,]),'endofloop':([280,281,],[284,285,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMICOLON programprep program1','program',5,'p_PROGRAM','myParser.py',117),
  ('programprep -> <empty>','programprep',0,'p_PROGRAMPREP','myParser.py',123),
  ('program1 -> vars mainquad functions jumpprogram principalaux','program1',5,'p_program1','myParser.py',139),
  ('program1 -> vars mainquad functions','program1',3,'p_program1','myParser.py',140),
  ('program1 -> principalaux','program1',1,'p_program1','myParser.py',141),
  ('principalaux -> principal','principalaux',1,'p_PRINCIPALAUX','myParser.py',146),
  ('principal -> PRINCIPAL LEFTPAR storefunct RIGHTPAR LEFTBR vars statutes RIGHTBR','principal',8,'p_PRINCIPAL','myParser.py',151),
  ('mainquad -> <empty>','mainquad',0,'p_MAINQUAD','myParser.py',161),
  ('jumpprogram -> <empty>','jumpprogram',0,'p_JUMPPROGRAM','myParser.py',172),
  ('statutes -> assign SEMICOLON statutes','statutes',3,'p_STATUTES','myParser.py',181),
  ('statutes -> callFunction SEMICOLON statutes','statutes',3,'p_STATUTES','myParser.py',182),
  ('statutes -> reading statutes SEMICOLON statutes','statutes',4,'p_STATUTES','myParser.py',183),
  ('statutes -> writing statutes SEMICOLON statutes','statutes',4,'p_STATUTES','myParser.py',184),
  ('statutes -> if statutes','statutes',2,'p_STATUTES','myParser.py',185),
  ('statutes -> while statutes','statutes',2,'p_STATUTES','myParser.py',186),
  ('statutes -> for statutes','statutes',2,'p_STATUTES','myParser.py',187),
  ('statutes -> return statutes','statutes',2,'p_STATUTES','myParser.py',188),
  ('statutes -> empty','statutes',1,'p_STATUTES','myParser.py',189),
  ('assign -> ID idgetter EQUAL operatorhandler exp assignquad','assign',6,'p_ASSIGN','myParser.py',194),
  ('assign -> ID idgetter array EQUAL operatorhandler exp assignquad','assign',7,'p_ASSIGN','myParser.py',195),
  ('idgetter -> <empty>','idgetter',0,'p_IDGETTER','myParser.py',200),
  ('idgetterarray -> <empty>','idgetterarray',0,'p_IDGETTERARRAY','myParser.py',216),
  ('assignquad -> <empty>','assignquad',0,'p_assignquad','myParser.py',231),
  ('callFunction -> ID checkid eraquad LEFTPAR paramexp checkparam RIGHTPAR quadgosub','callFunction',8,'p_CALLFUNCTION','myParser.py',258),
  ('checkid -> <empty>','checkid',0,'p_CHECKID','myParser.py',265),
  ('eraquad -> <empty>','eraquad',0,'p_ERAQUAD','myParser.py',279),
  ('paramexp -> exp paramquad paramaux','paramexp',3,'p_PARAMEXP','myParser.py',289),
  ('paramexp -> exp paramquad COMMA paramaux paramexp','paramexp',5,'p_PARAMEXP','myParser.py',290),
  ('paramexp -> empty','paramexp',1,'p_PARAMEXP','myParser.py',291),
  ('paramaux -> <empty>','paramaux',0,'p_PARAMAUX','myParser.py',296),
  ('paramquad -> <empty>','paramquad',0,'p_PARAMQUAD','myParser.py',303),
  ('checkparam -> <empty>','checkparam',0,'p_CHECKPARAM','myParser.py',327),
  ('quadgosub -> <empty>','quadgosub',0,'p_QUADGOSUB','myParser.py',339),
  ('reading -> READ auxreading LEFTPAR reading1 RIGHTPAR','reading',5,'p_READING','myParser.py',372),
  ('reading1 -> reading2','reading1',1,'p_READING1','myParser.py',377),
  ('reading1 -> empty','reading1',1,'p_READING1','myParser.py',378),
  ('reading2 -> exp readingquad','reading2',2,'p_READING2','myParser.py',383),
  ('reading2 -> exp readingquad COMMA auxreading reading2','reading2',5,'p_READING2','myParser.py',384),
  ('auxreading -> <empty>','auxreading',0,'p_AUXREADING','myParser.py',389),
  ('readingquad -> <empty>','readingquad',0,'p_READINGQUAD','myParser.py',396),
  ('writing -> WRITE auxwriting LEFTPAR writing1 RIGHTPAR','writing',5,'p_WRITING','myParser.py',412),
  ('writing1 -> writing2','writing1',1,'p_WRITING1','myParser.py',417),
  ('writing1 -> empty','writing1',1,'p_WRITING1','myParser.py',418),
  ('writing2 -> exp writingquad','writing2',2,'p_WRITING2','myParser.py',423),
  ('writing2 -> exp writingquad COMMA auxwriting writing2','writing2',5,'p_WRITING2','myParser.py',424),
  ('auxwriting -> <empty>','auxwriting',0,'p_AUXWRITING','myParser.py',429),
  ('writingquad -> <empty>','writingquad',0,'p_WRITINGQUAD','myParser.py',436),
  ('media -> MEDIA LEFTPAR array RIGHTPAR SEMICOLON','media',5,'p_MEDIA','myParser.py',450),
  ('if -> IF LEFTPAR exp RIGHTPAR quadif THEN LEFTBR statutes RIGHTBR else endif','if',11,'p_IF','myParser.py',464),
  ('else -> ELSE quadelse LEFTBR statutes RIGHTBR','else',5,'p_ELSE','myParser.py',469),
  ('else -> empty','else',1,'p_ELSE','myParser.py',470),
  ('quadif -> <empty>','quadif',0,'p_QUADIF','myParser.py',475),
  ('endif -> <empty>','endif',0,'p_ENDIF','myParser.py',493),
  ('quadelse -> <empty>','quadelse',0,'p_QUADELSE','myParser.py',501),
  ('endofloop -> <empty>','endofloop',0,'p_ENDOFLOOP','myParser.py',517),
  ('for -> FOR auxfor assign TO CTEINT DO quadfor LEFTBR statutes RIGHTBR endofloop','for',11,'p_FOR','myParser.py',531),
  ('auxfor -> <empty>','auxfor',0,'p_AUXFOR','myParser.py',536),
  ('quadfor -> <empty>','quadfor',0,'p_QUADFOR','myParser.py',544),
  ('while -> WHILE auxwhile LEFTPAR exp RIGHTPAR DO quadwhile LEFTBR statutes RIGHTBR endofloop','while',11,'p_WHILE','myParser.py',562),
  ('auxwhile -> <empty>','auxwhile',0,'p_AUXWHILE','myParser.py',567),
  ('quadwhile -> <empty>','quadwhile',0,'p_QUADWHILE','myParser.py',576),
  ('exp -> andexp quador','exp',2,'p_EXP','myParser.py',597),
  ('exp -> andexp quador OR operatorhandler andexp','exp',5,'p_EXP','myParser.py',598),
  ('quador -> <empty>','quador',0,'p_QUADOR','myParser.py',603),
  ('andexp -> boolexp quadand','andexp',2,'p_ANDEXP','myParser.py',614),
  ('andexp -> boolexp quadand AND operatorhandler boolexp','andexp',5,'p_ANDEXP','myParser.py',615),
  ('quadand -> <empty>','quadand',0,'p_QUADAND','myParser.py',620),
  ('boolexp -> arithexp','boolexp',1,'p_BOOLEXP','myParser.py',629),
  ('boolexp -> boolexp1 arithexp','boolexp',2,'p_BOOLEXP','myParser.py',630),
  ('boolexp1 -> arithexp LESSER operatorhandler arithexp quadbool','boolexp1',5,'p_BOOLEXP1','myParser.py',635),
  ('boolexp1 -> arithexp LESSERAND operatorhandler arithexp quadbool','boolexp1',5,'p_BOOLEXP1','myParser.py',636),
  ('boolexp1 -> arithexp GREATER operatorhandler arithexp quadbool','boolexp1',5,'p_BOOLEXP1','myParser.py',637),
  ('boolexp1 -> arithexp GREATERAND operatorhandler arithexp quadbool','boolexp1',5,'p_BOOLEXP1','myParser.py',638),
  ('boolexp1 -> arithexp NOTSAME operatorhandler arithexp quadbool','boolexp1',5,'p_BOOLEXP1','myParser.py',639),
  ('quadbool -> <empty>','quadbool',0,'p_QUADBOOL','myParser.py',644),
  ('arithexp -> geoexp','arithexp',1,'p_ARITHEXP','myParser.py',655),
  ('arithexp -> geoexp PLUS operatorhandler geoexp quadarith','arithexp',5,'p_ARITHEXP','myParser.py',656),
  ('arithexp -> geoexp REST operatorhandler geoexp quadarith','arithexp',5,'p_ARITHEXP','myParser.py',657),
  ('quadarith -> <empty>','quadarith',0,'p_QUADARITH','myParser.py',662),
  ('geoexp -> assignedexp','geoexp',1,'p_GEOEXP','myParser.py',671),
  ('geoexp -> assignedexp TIMES operatorhandler assignedexp quadgeo','geoexp',5,'p_GEOEXP','myParser.py',672),
  ('geoexp -> assignedexp DIVIDE operatorhandler assignedexp quadgeo','geoexp',5,'p_GEOEXP','myParser.py',673),
  ('quadgeo -> <empty>','quadgeo',0,'p_QUADGEO','myParser.py',678),
  ('assignedexp -> ID idgetter','assignedexp',2,'p_ASSIGNEDEXP','myParser.py',687),
  ('assignedexp -> CTEINT cteaux','assignedexp',2,'p_ASSIGNEDEXP','myParser.py',688),
  ('assignedexp -> CTEFLOAT cteaux','assignedexp',2,'p_ASSIGNEDEXP','myParser.py',689),
  ('assignedexp -> CTECHAR cteaux','assignedexp',2,'p_ASSIGNEDEXP','myParser.py',690),
  ('assignedexp -> CTESTRING cteaux','assignedexp',2,'p_ASSIGNEDEXP','myParser.py',691),
  ('assignedexp -> callFunction','assignedexp',1,'p_ASSIGNEDEXP','myParser.py',692),
  ('assignedexp -> LEFTPAR exp RIGHTPAR','assignedexp',3,'p_ASSIGNEDEXP','myParser.py',693),
  ('assignedexp -> ID array idgetterarray','assignedexp',3,'p_ASSIGNEDEXP','myParser.py',694),
  ('assignedexp -> empty','assignedexp',1,'p_ASSIGNEDEXP','myParser.py',695),
  ('cteaux -> <empty>','cteaux',0,'p_CTEAUX','myParser.py',700),
  ('operatorhandler -> <empty>','operatorhandler',0,'p_OPERATORHANDLER','myParser.py',742),
  ('vars -> vars0','vars',1,'p_VARS','myParser.py',754),
  ('vars -> empty','vars',1,'p_VARS','myParser.py',755),
  ('vars0 -> VARS vars1','vars0',2,'p_VARS0','myParser.py',760),
  ('vars1 -> vars1 typing COLON vars2 SEMICOLON addVar','vars1',6,'p_VARS1','myParser.py',765),
  ('vars1 -> empty','vars1',1,'p_VARS1','myParser.py',766),
  ('vars2 -> ID','vars2',1,'p_VARS2','myParser.py',771),
  ('vars2 -> ID array','vars2',2,'p_VARS2','myParser.py',772),
  ('vars2 -> ID COMMA vars2 addVar','vars2',4,'p_VARS2','myParser.py',773),
  ('vars2 -> ID array COMMA vars2 addVar','vars2',5,'p_VARS2','myParser.py',774),
  ('vars2 -> empty','vars2',1,'p_VARS2','myParser.py',775),
  ('addVar -> <empty>','addVar',0,'p_ADDVAR','myParser.py',783),
  ('typing -> INT saveTypeofVar','typing',2,'p_TYPING','myParser.py',803),
  ('typing -> CHAR saveTypeofVar','typing',2,'p_TYPING','myParser.py',804),
  ('typing -> FLOAT saveTypeofVar','typing',2,'p_TYPING','myParser.py',805),
  ('saveTypeofVar -> <empty>','saveTypeofVar',0,'p_SAVETYPEOFVAR','myParser.py',810),
  ('array -> LEFTSQR exp RIGHTSQR','array',3,'p_ARRAY','myParser.py',818),
  ('array -> LEFTSQR CTEINT RIGHTSQR','array',3,'p_ARRAY','myParser.py',819),
  ('functions -> FUNCTION VOID functions1 funcend functions','functions',5,'p_FUNCTIONS','myParser.py',826),
  ('functions -> FUNCTION INT functions1 funcend functions','functions',5,'p_FUNCTIONS','myParser.py',827),
  ('functions -> FUNCTION FLOAT functions1 funcend functions','functions',5,'p_FUNCTIONS','myParser.py',828),
  ('functions -> FUNCTION CHAR functions1 funcend functions','functions',5,'p_FUNCTIONS','myParser.py',829),
  ('functions -> empty','functions',1,'p_FUNCTIONS','myParser.py',830),
  ('functions1 -> ID storefunct LEFTPAR args RIGHTPAR vars LEFTBR setaddstart statutes RIGHTBR','functions1',10,'p_FUNCTIONS1','myParser.py',835),
  ('functions1 -> empty','functions1',1,'p_FUNCTIONS1','myParser.py',836),
  ('setaddstart -> <empty>','setaddstart',0,'p_SETADDSTART','myParser.py',841),
  ('args -> args1','args',1,'p_ARGS','myParser.py',857),
  ('args -> empty','args',1,'p_ARGS','myParser.py',858),
  ('args1 -> INT saveTypeofVar COLON ID mulParam nextParam','args1',6,'p_ARGS1','myParser.py',863),
  ('args1 -> FLOAT saveTypeofVar COLON ID mulParam nextParam','args1',6,'p_ARGS1','myParser.py',864),
  ('args1 -> CHAR saveTypeofVar COLON ID mulParam nextParam','args1',6,'p_ARGS1','myParser.py',865),
  ('nextParam -> COMMA args1','nextParam',2,'p_NEXTPARAM','myParser.py',870),
  ('nextParam -> empty','nextParam',1,'p_NEXTPARAM','myParser.py',871),
  ('mulParam -> <empty>','mulParam',0,'p_MULPARAM','myParser.py',876),
  ('funcend -> <empty>','funcend',0,'p_FUNCEND','myParser.py',893),
  ('storefunct -> <empty>','storefunct',0,'p_STOREFUNCT','myParser.py',908),
  ('return -> RETURN LEFTPAR exp RIGHTPAR SEMICOLON','return',5,'p_RETURN','myParser.py',917),
  ('return -> RETURN LEFTPAR exp RIGHTPAR','return',4,'p_RETURN','myParser.py',918),
  ('empty -> <empty>','empty',0,'p_empty','myParser.py',929),
]
