
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'PROGRAM PRINCIPAL VARS INT FLOAT CHAR ID FUNCTION RETURN READ WRITE IF THEN ELSE WHILE DO FOR TO VOID MEDIA MODA VARIANZA REGRESIONSIMPLE PLOTXY PLUS REST TIMES DIVIDE AND OR GREATER GREATERAND LESSER LESSERAND SAME NOTSAME EQUAL LEFTBR RIGHTBR LEFTPAR RIGHTPAR LEFTSQR RIGHTSQR COLON SEMICOLON COMMA DOT QUOT CTEINT CTEFLOAT CTESTRING CTECHAR nl\n        program : PROGRAM ID SEMICOLON program1\n        \n        program1 : vars functions principal\n                | vars functions \n                | program2\n        \n        program2 : principal\n        \n        principal : PRINCIPAL LEFTPAR RIGHTPAR LEFTBR statutes RIGHTBR\n        \n        statutes : assign SEMICOLON statutes\n                | callFunction SEMICOLON statutes\n                | reading statutes SEMICOLON statutes\n                | writing statutes SEMICOLON statutes\n                | if statutes\n                | while statutes\n                | for statutes\n                | return statutes\n                | empty\n        \n        assign : ID EQUAL exp\n                | ID LEFTSQR exp RIGHTSQR EQUAL exp\n        \n        callFunction : ID LEFTPAR exp RIGHTPAR\n        \n        reading : READ LEFTPAR reading1 RIGHTPAR\n        \n        reading1 : ID reading2\n        \n        reading2 : COMMA reading1\n                | empty\n        \n        writing : WRITE LEFTPAR writing1 RIGHTPAR\n        \n        writing1 : writing2 COMMA writing2\n                | writing2\n        \n        writing2 : CTESTRING\n                | CTEINT\n                | CTEFLOAT\n                | exp\n        \n        media : MEDIA LEFTPAR array RIGHTPAR SEMICOLON\n        \n        if : IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR else\n        \n        else : ELSE LEFTBR statutes RIGHTBR\n                | empty\n        \n        for : FOR assign TO CTEINT DO LEFTBR statutes RIGHTBR\n        \n        while : WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR\n        \n        exp : ID expression exp\n            | array expression exp\n            | constants expression exp\n            | ID\n            | callFunction\n            | ID LEFTSQR exp RIGHTSQR\n            | constants\n        \n        constants : CTEINT\n                | CTEFLOAT\n        \n        expression : PLUS\n                | REST\n                | TIMES\n                | DIVIDE\n                | GREATER\n                | GREATERAND\n                | LESSER\n                | LESSERAND\n        \n        vars : VARS vars1\n            | empty\n        \n        vars1 : typing COLON ID variables SEMICOLON vars2\n        \n        vars2 : vars1\n            | empty\n        \n        variables : COMMA ID variables\n                | COMMA ID LEFTSQR CTEINT RIGHTSQR variables\n                | empty\n        \n        typing : INT\n                | CHAR\n                | FLOAT\n        \n        array : LEFTSQR exp RIGHTSQR\n                | LEFTSQR CTEINT RIGHTSQR\n        \n        functions : FUNCTION VOID voidfunction functions\n                    | FUNCTION typing typefunction functions\n                    | empty\n        \n        voidfunction : ID LEFTPAR args RIGHTPAR vars LEFTBR statutes RIGHTBR\n        \n        typefunction : ID LEFTPAR args RIGHTPAR vars LEFTBR statutes return SEMICOLON RIGHTBR\n        \n        args : typing COLON ID argsplural\n            | empty\n        \n        argsplural : COMMA args\n                    | empty\n        \n        return : RETURN LEFTPAR exp RIGHTPAR SEMICOLON\n                | RETURN LEFTPAR exp RIGHTPAR\n        \n        empty : \n        '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,4,5,6,7,8,10,12,14,15,21,26,28,32,34,60,62,84,85,86,175,184,],[0,-77,-1,-77,-5,-4,-54,-3,-68,-53,-2,-77,-77,-66,-67,-77,-6,-55,-56,-57,-69,-70,]),'ID':([2,17,18,19,22,23,24,31,37,42,43,44,45,46,47,54,63,64,71,72,73,74,75,76,77,80,82,91,92,98,121,122,123,124,125,126,127,128,129,130,131,132,137,139,141,142,146,147,151,159,165,172,173,174,181,182,183,185,187,188,190,],[3,-61,-62,-63,27,29,30,49,61,49,49,49,49,49,49,79,49,49,93,93,93,104,93,93,93,93,116,49,49,93,93,93,-45,-46,-47,-48,-49,-50,-51,-52,93,93,-19,104,-23,93,-76,49,49,93,-75,49,49,49,-77,-35,-34,-31,-33,49,-32,]),'SEMICOLON':([3,30,36,38,40,41,42,43,44,45,46,47,48,61,63,64,65,66,67,68,69,70,87,89,90,91,92,93,94,96,97,99,100,119,120,136,137,141,146,152,153,155,156,165,169,170,171,176,181,182,183,185,187,190,],[4,-77,60,-60,63,64,-77,-77,-77,-77,-77,-77,-15,-77,-77,-77,91,92,-11,-12,-13,-14,-58,-7,-8,-77,-77,-39,-16,-42,-40,-43,-44,-9,-10,-18,-19,-23,165,-77,-36,-37,-38,-75,-59,-41,-17,180,-77,-35,-34,-31,-33,-32,]),'VARS':([4,81,83,],[9,9,9,]),'FUNCTION':([4,6,10,15,26,28,60,84,85,86,175,184,],[-77,13,-54,-53,13,13,-77,-55,-56,-57,-69,-70,]),'PRINCIPAL':([4,6,10,12,14,15,26,28,32,34,60,84,85,86,175,184,],[11,-77,-54,11,-68,-53,-77,-77,-66,-67,-77,-55,-56,-57,-69,-70,]),'INT':([9,13,33,35,60,149,],[17,17,17,17,17,17,]),'CHAR':([9,13,33,35,60,149,],[18,18,18,18,18,18,]),'FLOAT':([9,13,33,35,60,149,],[19,19,19,19,19,19,]),'LEFTBR':([10,15,25,60,81,83,84,85,86,115,117,162,163,164,186,],[-54,-53,31,-77,-77,-77,-55,-56,-57,147,151,172,173,174,188,]),'LEFTPAR':([11,27,29,49,50,51,52,53,55,93,],[20,33,35,73,74,75,76,77,80,73,]),'VOID':([13,],[22,]),'COLON':([16,17,18,19,57,],[24,-61,-62,-63,82,]),'RIGHTPAR':([20,33,35,56,58,59,93,96,97,99,100,102,103,104,105,106,107,108,109,110,111,112,114,116,136,138,140,148,149,150,153,155,156,160,161,167,170,],[25,-77,-77,81,-72,83,-39,-42,-40,-43,-44,136,137,-77,141,-25,-26,-27,-28,-29,143,144,146,-77,-18,-20,-22,-71,-77,-74,-36,-37,-38,-21,-24,-73,-41,]),'COMMA':([30,61,93,96,97,99,100,104,106,107,108,109,110,116,136,152,153,155,156,170,],[37,37,-39,-42,-40,-43,-44,139,142,-26,-27,-28,-29,149,-18,37,-36,-37,-38,-41,]),'READ':([31,42,43,44,45,46,47,63,64,91,92,137,141,146,147,151,165,172,173,174,181,182,183,185,187,188,190,],[50,50,50,50,50,50,50,50,50,50,50,-19,-23,-76,50,50,-75,50,50,50,-77,-35,-34,-31,-33,50,-32,]),'WRITE':([31,42,43,44,45,46,47,63,64,91,92,137,141,146,147,151,165,172,173,174,181,182,183,185,187,188,190,],[51,51,51,51,51,51,51,51,51,51,51,-19,-23,-76,51,51,-75,51,51,51,-77,-35,-34,-31,-33,51,-32,]),'IF':([31,42,43,44,45,46,47,63,64,91,92,137,141,146,147,151,165,172,173,174,181,182,183,185,187,188,190,],[52,52,52,52,52,52,52,52,52,52,52,-19,-23,-76,52,52,-75,52,52,52,-77,-35,-34,-31,-33,52,-32,]),'WHILE':([31,42,43,44,45,46,47,63,64,91,92,137,141,146,147,151,165,172,173,174,181,182,183,185,187,188,190,],[53,53,53,53,53,53,53,53,53,53,53,-19,-23,-76,53,53,-75,53,53,53,-77,-35,-34,-31,-33,53,-32,]),'FOR':([31,42,43,44,45,46,47,63,64,91,92,137,141,146,147,151,165,172,173,174,181,182,183,185,187,188,190,],[54,54,54,54,54,54,54,54,54,54,54,-19,-23,-76,54,54,-75,54,54,54,-77,-35,-34,-31,-33,54,-32,]),'RETURN':([31,42,43,44,45,46,47,48,63,64,67,68,69,70,89,90,91,92,119,120,137,141,146,147,151,165,168,172,173,174,181,182,183,185,187,188,190,],[55,55,55,55,55,55,55,-15,55,55,-11,-12,-13,-14,-7,-8,55,55,-9,-10,-19,-23,-76,55,55,-75,55,55,55,55,-77,-35,-34,-31,-33,55,-32,]),'RIGHTBR':([31,39,44,45,46,47,48,63,64,67,68,69,70,89,90,91,92,119,120,146,147,165,166,172,173,174,177,178,179,180,181,182,183,185,187,188,189,190,],[-77,62,-77,-77,-77,-77,-15,-77,-77,-11,-12,-13,-14,-7,-8,-77,-77,-9,-10,-76,-77,-75,175,-77,-77,-77,181,182,183,184,-77,-35,-34,-31,-33,-77,190,-32,]),'EQUAL':([49,79,135,],[71,71,159,]),'LEFTSQR':([49,61,71,72,73,75,76,77,79,80,93,98,121,122,123,124,125,126,127,128,129,130,131,132,142,159,],[72,88,98,98,98,98,98,98,72,98,122,98,98,98,-45,-46,-47,-48,-49,-50,-51,-52,98,98,98,98,]),'CTEINT':([71,72,73,75,76,77,80,88,98,113,121,122,123,124,125,126,127,128,129,130,131,132,142,159,],[99,99,99,108,99,99,99,118,134,145,99,99,-45,-46,-47,-48,-49,-50,-51,-52,99,99,108,99,]),'CTEFLOAT':([71,72,73,75,76,77,80,98,121,122,123,124,125,126,127,128,129,130,131,132,142,159,],[100,100,100,109,100,100,100,100,100,100,-45,-46,-47,-48,-49,-50,-51,-52,100,100,109,100,]),'CTESTRING':([75,142,],[107,107,]),'TO':([78,93,94,96,97,99,100,136,153,155,156,170,171,],[113,-39,-16,-42,-40,-43,-44,-18,-36,-37,-38,-41,-17,]),'RIGHTSQR':([93,96,97,99,100,101,118,133,134,136,153,154,155,156,170,],[-39,-42,-40,-43,-44,135,152,157,158,-18,-36,170,-37,-38,-41,]),'PLUS':([93,95,96,99,100,108,109,134,157,158,],[123,123,123,-43,-44,-43,-44,-43,-64,-65,]),'REST':([93,95,96,99,100,108,109,134,157,158,],[124,124,124,-43,-44,-43,-44,-43,-64,-65,]),'TIMES':([93,95,96,99,100,108,109,134,157,158,],[125,125,125,-43,-44,-43,-44,-43,-64,-65,]),'DIVIDE':([93,95,96,99,100,108,109,134,157,158,],[126,126,126,-43,-44,-43,-44,-43,-64,-65,]),'GREATER':([93,95,96,99,100,108,109,134,157,158,],[127,127,127,-43,-44,-43,-44,-43,-64,-65,]),'GREATERAND':([93,95,96,99,100,108,109,134,157,158,],[128,128,128,-43,-44,-43,-44,-43,-64,-65,]),'LESSER':([93,95,96,99,100,108,109,134,157,158,],[129,129,129,-43,-44,-43,-44,-43,-64,-65,]),'LESSERAND':([93,95,96,99,100,108,109,134,157,158,],[130,130,130,-43,-44,-43,-44,-43,-64,-65,]),'THEN':([143,],[162,]),'DO':([144,145,],[163,164,]),'ELSE':([181,],[186,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'program1':([4,],[5,]),'vars':([4,81,83,],[6,115,117,]),'principal':([4,12,],[7,21,]),'program2':([4,],[8,]),'empty':([4,6,26,28,30,31,33,35,42,43,44,45,46,47,60,61,63,64,81,83,91,92,104,116,147,149,151,152,172,173,174,181,188,],[10,14,14,14,38,48,58,58,48,48,48,48,48,48,86,38,48,48,10,10,48,48,140,150,48,58,48,38,48,48,48,187,48,]),'functions':([6,26,28,],[12,32,34,]),'vars1':([9,60,],[15,85,]),'typing':([9,13,33,35,60,149,],[16,23,57,57,16,57,]),'voidfunction':([22,],[26,]),'typefunction':([23,],[28,]),'variables':([30,61,152,],[36,87,169,]),'statutes':([31,42,43,44,45,46,47,63,64,91,92,147,151,172,173,174,188,],[39,65,66,67,68,69,70,89,90,119,120,166,168,177,178,179,189,]),'assign':([31,42,43,44,45,46,47,54,63,64,91,92,147,151,172,173,174,188,],[40,40,40,40,40,40,40,78,40,40,40,40,40,40,40,40,40,40,]),'callFunction':([31,42,43,44,45,46,47,63,64,71,72,73,75,76,77,80,91,92,98,121,122,131,132,142,147,151,159,172,173,174,188,],[41,41,41,41,41,41,41,41,41,97,97,97,97,97,97,97,41,41,97,97,97,97,97,97,41,41,97,41,41,41,41,]),'reading':([31,42,43,44,45,46,47,63,64,91,92,147,151,172,173,174,188,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'writing':([31,42,43,44,45,46,47,63,64,91,92,147,151,172,173,174,188,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'if':([31,42,43,44,45,46,47,63,64,91,92,147,151,172,173,174,188,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'while':([31,42,43,44,45,46,47,63,64,91,92,147,151,172,173,174,188,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'for':([31,42,43,44,45,46,47,63,64,91,92,147,151,172,173,174,188,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'return':([31,42,43,44,45,46,47,63,64,91,92,147,151,168,172,173,174,188,],[47,47,47,47,47,47,47,47,47,47,47,47,47,176,47,47,47,47,]),'args':([33,35,149,],[56,59,167,]),'vars2':([60,],[84,]),'exp':([71,72,73,75,76,77,80,98,121,122,131,132,142,159,],[94,101,102,110,111,112,114,133,153,154,155,156,110,171,]),'array':([71,72,73,75,76,77,80,98,121,122,131,132,142,159,],[95,95,95,95,95,95,95,95,95,95,95,95,95,95,]),'constants':([71,72,73,75,76,77,80,98,121,122,131,132,142,159,],[96,96,96,96,96,96,96,96,96,96,96,96,96,96,]),'reading1':([74,139,],[103,160,]),'writing1':([75,],[105,]),'writing2':([75,142,],[106,161,]),'expression':([93,95,96,],[121,131,132,]),'reading2':([104,],[138,]),'argsplural':([116,],[148,]),'else':([181,],[185,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMICOLON program1','program',4,'p_PROGRAM','myParser.py',26),
  ('program1 -> vars functions principal','program1',3,'p_program1','myParser.py',32),
  ('program1 -> vars functions','program1',2,'p_program1','myParser.py',33),
  ('program1 -> program2','program1',1,'p_program1','myParser.py',34),
  ('program2 -> principal','program2',1,'p_program2','myParser.py',39),
  ('principal -> PRINCIPAL LEFTPAR RIGHTPAR LEFTBR statutes RIGHTBR','principal',6,'p_PRINCIPAL','myParser.py',44),
  ('statutes -> assign SEMICOLON statutes','statutes',3,'p_STATUTES','myParser.py',50),
  ('statutes -> callFunction SEMICOLON statutes','statutes',3,'p_STATUTES','myParser.py',51),
  ('statutes -> reading statutes SEMICOLON statutes','statutes',4,'p_STATUTES','myParser.py',52),
  ('statutes -> writing statutes SEMICOLON statutes','statutes',4,'p_STATUTES','myParser.py',53),
  ('statutes -> if statutes','statutes',2,'p_STATUTES','myParser.py',54),
  ('statutes -> while statutes','statutes',2,'p_STATUTES','myParser.py',55),
  ('statutes -> for statutes','statutes',2,'p_STATUTES','myParser.py',56),
  ('statutes -> return statutes','statutes',2,'p_STATUTES','myParser.py',57),
  ('statutes -> empty','statutes',1,'p_STATUTES','myParser.py',58),
  ('assign -> ID EQUAL exp','assign',3,'p_ASSIGN','myParser.py',63),
  ('assign -> ID LEFTSQR exp RIGHTSQR EQUAL exp','assign',6,'p_ASSIGN','myParser.py',64),
  ('callFunction -> ID LEFTPAR exp RIGHTPAR','callFunction',4,'p_CALLFUNCTION','myParser.py',69),
  ('reading -> READ LEFTPAR reading1 RIGHTPAR','reading',4,'p_READING','myParser.py',74),
  ('reading1 -> ID reading2','reading1',2,'p_READING1','myParser.py',79),
  ('reading2 -> COMMA reading1','reading2',2,'p_READING2','myParser.py',84),
  ('reading2 -> empty','reading2',1,'p_READING2','myParser.py',85),
  ('writing -> WRITE LEFTPAR writing1 RIGHTPAR','writing',4,'p_WRITING','myParser.py',90),
  ('writing1 -> writing2 COMMA writing2','writing1',3,'p_WRITING1','myParser.py',95),
  ('writing1 -> writing2','writing1',1,'p_WRITING1','myParser.py',96),
  ('writing2 -> CTESTRING','writing2',1,'p_WRITING2','myParser.py',101),
  ('writing2 -> CTEINT','writing2',1,'p_WRITING2','myParser.py',102),
  ('writing2 -> CTEFLOAT','writing2',1,'p_WRITING2','myParser.py',103),
  ('writing2 -> exp','writing2',1,'p_WRITING2','myParser.py',104),
  ('media -> MEDIA LEFTPAR array RIGHTPAR SEMICOLON','media',5,'p_MEDIA','myParser.py',109),
  ('if -> IF LEFTPAR exp RIGHTPAR THEN LEFTBR statutes RIGHTBR else','if',9,'p_IF','myParser.py',116),
  ('else -> ELSE LEFTBR statutes RIGHTBR','else',4,'p_ELSE','myParser.py',121),
  ('else -> empty','else',1,'p_ELSE','myParser.py',122),
  ('for -> FOR assign TO CTEINT DO LEFTBR statutes RIGHTBR','for',8,'p_FOR','myParser.py',129),
  ('while -> WHILE LEFTPAR exp RIGHTPAR DO LEFTBR statutes RIGHTBR','while',8,'p_WHILE','myParser.py',134),
  ('exp -> ID expression exp','exp',3,'p_EXP','myParser.py',141),
  ('exp -> array expression exp','exp',3,'p_EXP','myParser.py',142),
  ('exp -> constants expression exp','exp',3,'p_EXP','myParser.py',143),
  ('exp -> ID','exp',1,'p_EXP','myParser.py',144),
  ('exp -> callFunction','exp',1,'p_EXP','myParser.py',145),
  ('exp -> ID LEFTSQR exp RIGHTSQR','exp',4,'p_EXP','myParser.py',146),
  ('exp -> constants','exp',1,'p_EXP','myParser.py',147),
  ('constants -> CTEINT','constants',1,'p_CONSTANTS','myParser.py',152),
  ('constants -> CTEFLOAT','constants',1,'p_CONSTANTS','myParser.py',153),
  ('expression -> PLUS','expression',1,'p_EXPRESSION','myParser.py',158),
  ('expression -> REST','expression',1,'p_EXPRESSION','myParser.py',159),
  ('expression -> TIMES','expression',1,'p_EXPRESSION','myParser.py',160),
  ('expression -> DIVIDE','expression',1,'p_EXPRESSION','myParser.py',161),
  ('expression -> GREATER','expression',1,'p_EXPRESSION','myParser.py',162),
  ('expression -> GREATERAND','expression',1,'p_EXPRESSION','myParser.py',163),
  ('expression -> LESSER','expression',1,'p_EXPRESSION','myParser.py',164),
  ('expression -> LESSERAND','expression',1,'p_EXPRESSION','myParser.py',165),
  ('vars -> VARS vars1','vars',2,'p_VARS','myParser.py',172),
  ('vars -> empty','vars',1,'p_VARS','myParser.py',173),
  ('vars1 -> typing COLON ID variables SEMICOLON vars2','vars1',6,'p_VARS1','myParser.py',178),
  ('vars2 -> vars1','vars2',1,'p_VARS2','myParser.py',183),
  ('vars2 -> empty','vars2',1,'p_VARS2','myParser.py',184),
  ('variables -> COMMA ID variables','variables',3,'p_VARIABLES','myParser.py',189),
  ('variables -> COMMA ID LEFTSQR CTEINT RIGHTSQR variables','variables',6,'p_VARIABLES','myParser.py',190),
  ('variables -> empty','variables',1,'p_VARIABLES','myParser.py',191),
  ('typing -> INT','typing',1,'p_TYPING','myParser.py',196),
  ('typing -> CHAR','typing',1,'p_TYPING','myParser.py',197),
  ('typing -> FLOAT','typing',1,'p_TYPING','myParser.py',198),
  ('array -> LEFTSQR exp RIGHTSQR','array',3,'p_ARRAY','myParser.py',203),
  ('array -> LEFTSQR CTEINT RIGHTSQR','array',3,'p_ARRAY','myParser.py',204),
  ('functions -> FUNCTION VOID voidfunction functions','functions',4,'p_FUNCTIONS','myParser.py',211),
  ('functions -> FUNCTION typing typefunction functions','functions',4,'p_FUNCTIONS','myParser.py',212),
  ('functions -> empty','functions',1,'p_FUNCTIONS','myParser.py',213),
  ('voidfunction -> ID LEFTPAR args RIGHTPAR vars LEFTBR statutes RIGHTBR','voidfunction',8,'p_VOIDFUNCTION','myParser.py',218),
  ('typefunction -> ID LEFTPAR args RIGHTPAR vars LEFTBR statutes return SEMICOLON RIGHTBR','typefunction',10,'p_TYPEFUNCTION','myParser.py',223),
  ('args -> typing COLON ID argsplural','args',4,'p_ARGS','myParser.py',228),
  ('args -> empty','args',1,'p_ARGS','myParser.py',229),
  ('argsplural -> COMMA args','argsplural',2,'p_ARGSPLURAL','myParser.py',234),
  ('argsplural -> empty','argsplural',1,'p_ARGSPLURAL','myParser.py',235),
  ('return -> RETURN LEFTPAR exp RIGHTPAR SEMICOLON','return',5,'p_RETURN','myParser.py',240),
  ('return -> RETURN LEFTPAR exp RIGHTPAR','return',4,'p_RETURN','myParser.py',241),
  ('empty -> <empty>','empty',0,'p_empty','myParser.py',252),
]
